import logging
from aiogram import Bot, Dispatcher, types, executor
import requests
import pandas as pd
import pandas_ta as ta
import numpy as np

# –¢–æ–∫–µ–Ω –∑ BotFather
API_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–¢–£–¢"  # ‚ö†Ô∏è –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω!

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–∏—Ö —Ü—ñ–Ω –∑ Binance
def fetch_kline_closes(symbol="BTCUSDT", interval="15m", limit=100):
    url = "https://api.binance.com/api/v3/klines"
    params = {"symbol": symbol, "interval": interval, "limit": limit}
    response = requests.get(url, params=params)
    data = response.json()
    closes = [float(candle[4]) for candle in data]  # close —Ü—ñ–Ω–∏
    return closes


# –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ä—É—Ö—É
def predict_direction(prices):
    df = pd.DataFrame({'close': prices})

    sma = ta.sma(df['close'], length=14)
    rsi = ta.rsi(df['close'], length=14)
    macd_df = ta.macd(df['close'])

    if macd_df is None or rsi is None or sma is None:
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏."

    # –î–æ–¥–∞—î–º–æ MACD –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ df
    df['rsi'] = rsi
    df['macd'] = macd_df['MACD_12_26_9']
    df['signal'] = macd_df['MACDs_12_26_9']

    try:
        if df['rsi'].iloc[-1] < 30 and df['macd'].iloc[-1] > df['signal'].iloc[-1]:
            return "üìà –í–≥–æ—Ä—É (LONG)"
        elif df['rsi'].iloc[-1] > 70 and df['macd'].iloc[-1] < df['signal'].iloc[-1]:
            return "üìâ –í–Ω–∏–∑ (SHORT)"
        else:
            return "‚û°Ô∏è –ë—ñ—á–Ω–∏–π —Ä—É—Ö –∞–±–æ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ—Å—Ç—å"
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {e}"


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ /predict —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 15 —Ö–≤–∏–ª–∏–Ω –ø–æ BTC/USDT.")


# –ö–æ–º–∞–Ω–¥–∞ /predict
@dp.message_handler(commands=["predict"])
async def predict(message: types.Message):
    try:
        prices = fetch_kline_closes()
        prediction = predict_direction(prices)
        await message.reply(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 15 —Ö–≤–∏–ª–∏–Ω:\n\n{prediction}")
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è /predict")
        await message.reply(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")


# –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤—Å—ñ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@dp.message_handler()
async def unknown(message: types.Message):
    await message.reply("–Ø –ø–æ–∫–∏ —â–æ —Ä–æ–∑—É–º—ñ—é –ª–∏—à–µ /start —Ç–∞ /predict.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
