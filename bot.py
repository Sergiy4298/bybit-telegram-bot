import logging
import requests
import pandas as pd
import ta
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = "7557990762:AAHsPB9g7S7ZJWDOwSt3GiR-Pt23C8xSmaA"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–∏—Ö —Ü—ñ–Ω –∑ Binance
def fetch_kline_closes(symbol="BTCUSDT", interval="15m"):
    url = "https://api.binance.com/api/v3/klines"
    params = {
        "symbol": symbol,
        "interval": interval,
        "limit": 100
    }
    response = requests.get(url, params=params)
    try:
        data = response.json()
        if isinstance(data, dict) and data.get("code"):
            raise ValueError(f"Binance API error: {data['msg']}")
        if not data or len(data) < 30:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ Binance")
    except Exception as e:
        raise ValueError(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Binance: {e}")
    
    closes = [float(candle[4]) for candle in data]
    return closes

# –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ä—É—Ö—É
def predict_direction(prices):
    df = pd.DataFrame({'close': prices})
    if len(df) < 20:
        return "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É."
    try:
        sma = ta.trend.sma_indicator(df['close'], window=14)
        rsi = ta.momentum.rsi(df['close'], window=14)
        macd = ta.trend.macd(df['close'])
        signal = ta.trend.macd_signal(df['close'])

        if sma.isna().any() or rsi.isna().any() or macd.isna().any() or signal.isna().any():
            return "‚ö†Ô∏è –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —â–µ –Ω–µ —Å—Ñ–æ—Ä–º—É–≤–∞–ª–∏—Å—å –ø–æ–≤–Ω—ñ—Å—Ç—é."

        df['sma'] = sma
        df['rsi'] = rsi
        df['macd'] = macd
        df['signal'] = signal

        last_rsi = df['rsi'].iloc[-1]
        last_macd = df['macd'].iloc[-1]
        last_signal = df['signal'].iloc[-1]

        if last_rsi < 30 and last_macd > last_signal:
            return "üìà –í–≥–æ—Ä—É (LONG)"
        elif last_rsi > 70 and last_macd < last_signal:
            return "üìâ –í–Ω–∏–∑ (SHORT)"
        else:
            return "‚û°Ô∏è –ë—ñ—á–Ω–∏–π —Ä—É—Ö –∞–±–æ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ"
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏: {e}"

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ /predict —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 15 —Ö–≤–∏–ª–∏–Ω –ø–æ BTC/USDT.")

# –ö–æ–º–∞–Ω–¥–∞ /predict
@dp.message_handler(commands=["predict"])
async def predict(message: types.Message):
    try:
        prices = fetch_kline_closes()
        prediction = predict_direction(prices)
        await message.reply(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 15 —Ö–≤: {prediction}")
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ —É —Ñ—É–Ω–∫—Ü—ñ—ó predict")
        await message.reply(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")

# –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message_handler()
async def unknown(message: types.Message):
    await message.reply("–Ø –ø–æ–∫–∏ —â–æ —Ä–æ–∑—É–º—ñ—é –ª–∏—à–µ /start —Ç–∞ /predict.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
